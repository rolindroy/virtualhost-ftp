#!/bin/bash

site_available=/etc/apache2/sites-available/
template=`pwd`/vhost-template
htaccess=`pwd`/.htaccess
index=`pwd`/index
home_dir=/webadmin/
conf_path=`pwd`/conf/
certpath=`pwd`/cert
vhost_ssl=`pwd`/vhost-ssl
certificate_path=/etc/apache2/certs

usage()
{
cat <<"USAGE"

    Usage: sudo bash create-project [OPTIONS] [HOSTNAME]   

    [OPTIONS]                                          
        -c,  -create      Create a new Web Application. 
        -s,  -sslhost     Create vhost with https.
        -f,  -cftp        Create FTP Account.  
        -e,  -enable      Enable disabled Web Application.
        -d,  -disable     Disable existing Web Application.
        -u,  -uhost       Update Existing Applications.
        -us, -usslhost    Update Existing SSL Application.
        -p,  -upass       Update Existing FTP account Password.
        -r,  -remove      Delele existing Web Application.
        -cl, -clone       Clone git/svn Repo to Application.
        -up, -repoUpdate  Update Existing Repo
        -ht, -htaccess    Create .htaccess file
        -h,  -help        Help, Usage                              
    [HOSTNAME]                                          
        Eg:                                            
            example.com                               
            www.example.com                           
    Examples:
        sudo bash create-project -cl www.example.com 
        sudo bash create-project -ur www.example.com 
        sudo bash create-project -c www.example.com 
        sudo bash create-project -remove www.example.com 
        
    For SSL Key Chain :                                
        Create directory under the 'cert' directory with the name of host,
        and upload all the SSL Certificate Files to the respected directory.  
        Eg :
            cert/www.example.com/example-ssl.crt
            cert/www.example.com/example-ssl.pem
            cert/www.example.com/ca-bundle.crl
            
    --
    @author Rolind Roy <rolind.roy@gmail.com>
       
USAGE
exit 0
}

enable_host()
{
    if [ -f $site_available/$host".conf" ]
    then
        echo -e "\nEnabling virtual host $host.conf"
        sudo a2ensite $host".conf"
    else
        echo -e "\nHost name $host.conf not exist!"
    fi
    
    if [ -f $site_available/$host"-ssl.conf" ]
    then
        echo -e "\nEnabling virtual host $host-ssl.conf"
        sudo a2ensite $host"-ssl.conf"
    else
        echo -e "\nHost name $host-ssl.conf not exist!"
    fi
}

disable_host()
{

    if [ -f $site_available/$host".conf" ]
    then
       echo -e "\nDisabling virtual host $host.conf"
        sudo a2dissite $host".conf"
    else
        echo -e "\nHost name $host.conf not exist!"
    fi
    
    if [ -f $site_available/$host"-ssl.conf" ]
    then
        cho -e "\nDisabling virtual host $host-ssl.conf"
        sudo a2dissite $host"-ssl.conf"
    else
        echo -e "\nHost name $host-ssl.conf not exist!"
    fi
    
}

create_vhost()
{
    vhost_name=$site_available$host".conf"
    if [ -f $vhost_name ]
    then
        echo -e "\nHost name $host already exist!"
    else
        echo -e "\nDefault ServerAlias : " $host
        printf "Would you like to change ServerAlias $host to www.$host? (y/n) : "
        read -r alise
        if [ $alise == "y" ]; then
            alise_name="www."$host;
        else
            alise_name=$host;
        fi
        echo -e "\nCreating the new $host.conf Virtual Host with DocumentRoot: $docroot"
        sudo cp $template $vhost_name
        sudo sed -i 's/{SERVERNAME}/'$host'/g' $vhost_name
        sudo sed -i 's/{SERVERALIAS}/'$alise_name'/g' $vhost_name
        sudo sed -i 's|{DOCUMENTROOT}|'$docroot'|g' $vhost_name
        
        echo "HostName     : "$host >>$conf_file
        echo "Website      : http://"$host/ >>$conf_file
        enable_host
    fi  
}

create_ftp()
{
    printf "Would you like to create FTP Account ? (y/n) : " 
    read -r isFtp 
        
    if [ $isFtp == "y" ]; then
        printf "FTP Account Name: "
        read -r ftp_account
        printf "Creating Ftp Account $ftp_account"
        echo ""
        ret=false
        getent passwd $ftp_account >/dev/null 2>&1 && ret=true

        if $ret; then
            echo -e "\nFTP Username $ftp_account already Exist!"
        else
            sudo useradd -g ftp-readwrite -d $docroot $ftp_account
            echo ""
            read -s -p "Enter new UNIX password: " pass
            echo ""
            sudo passwd $ftp_account
            echo "FTPAccount   : "$ftp_account >>$conf_file
            echo "FTPPassword  : "$pass >>$conf_file
        fi 
    fi
}

copy_files()
{
    indexFile=$docroot/index.html
    sudo cp $index $indexFile
    sudo sed -i 's/{SERVERNAME}/'$host'/g' $indexFile
}

remove_all()
{
    vhost_name=$site_available$host".conf"
    disable_host
    echo -e "\nRemoving application host file $vhost_name and directory $docroot !"
    sudo rm $vhost_name
    sudo rm -r $docroot
    user=`cat $conf_file | grep "FTPAccount" | awk -F ": " '{print $2}'` 
    if [ ! -z $uers];
    then
        echo -e "\nRemoving FTPAccount $user!"
        sudo deluser $uers
    fi
    echo -e "\nRemoving config files $conf_file!"
    rm $conf_file
}

create_dir()
{
    if [ -d $docroot ]
    then
        echo -e "\nDirectory $docroot already exist!"
    else
        echo "Creating $docroot directory."
        mkdir $docroot
        echo "DocumentRoot : "$docroot >>$conf_file
        echo "CreatedDate  : "`date` >>$conf_file
    fi
}

create_svhost()
{   
    if [ ! -d $certificate_path]
    then
        mkdir $certificate_path
    fi
    $siteCertPath=$certificate_path/$host
    mkdir $siteCertPath
    
    if [ ! -d $certpath ]
    then
        mkdir $certpath
    fi
    certfilepath=$certpath/$host
    
    if [ ! -d $certfilepath ]
    then
        usage
    else
        vhost_name_ssl=$site_available$host"-ssl.conf"
        if [ -f $vhost_name_ssl ]
        then
            echo -e "\nHost name $host already exist!"
        else
            echo -e "\nDefault ServerAlias : " $host
            printf "Would you like to change ServerAlias $host to www.$host? (y/n) : "
            read -r alise_ssl
            if [ $alise_ssl == "y" ]; then
                alise_ssl_name="www."$host;
            else
                alise_ssl_name=$host;
            fi
            echo -e "\nCreating the new $host-ssl.conf Virtual Host with DocumentRoot: $docroot"
            sudo cp $vhost_ssl $vhost_name_ssl
            sudo cp $certfilepath/* $siteCertPath/
            
            sudo sed -i 's/{SERVERNAME}/'$host'/g' $vhost_name_ssl
            sudo sed -i 's/{SERVERALIAS}/'$alise_ssl_name'/g' $vhost_name_ssl
            sudo sed -i 's|{DOCUMENTROOT}|'$docroot'|g' $vhost_name_ssl
            
            printf "SSLCertificateFile    (Eg example-ssl.crt): "
            read -r crtFile
            
            printf "SSLCertificateKeyFile (Eg example-ssl.pem): "
            read -r pemFile
            
            printf "SSLCACertificateFile    (Eg ca-bundle.crl): "
            read -r caFile
            
            if [[ -f $certfilepath/$crtFile && -f $certfilepath/$pemFile && -f $certfilepath/$caFile ]]; then
            
                sudo sed -i 's|{CRT_FILE}|'$siteCertPath/$crtFile'|g' $vhost_name_ssl
                sudo sed -i 's|{PEM_FILE}|'$siteCertPath/$pemFile'|g' $vhost_name_ssl
                sudo sed -i 's|{CHAIN_CA_FILE}|'$siteCertPath/$caFile'|g' $vhost_name_ssl
                
                echo "SSLCertificateFile     : "$siteCertPath/$crtFile >>$conf_file
                echo "SSLCertificateKeyFile  : "$siteCertPath/$pemFile >>$conf_file
                echo "SSLCACertificateFile   : "$siteCertPath/$caFile >>$conf_file
                enable_host
            else
                sudo rm $vhost_name_ssl
                usage
            fi
        fi  
    fi
    
}

restart_apache()
{
    echo Restarting apache.
    sudo service apache2 reload
}

update_vhost()
{
    vhost_name=$site_available$host".conf"
    if [ ! -f $vhost_name ]
    then
        echo -e "\nHost name $host.conf does not exist!"
    else
        echo -e "\nDefault ServerAlias : " $host
        printf "Would you like to change ServerAlias $host to www.$host? (y/n) : "
        read -r alise
        if [ $alise == "y" ]; then
            alise_name="www."$host;
        else
            alise_name=$host;
        fi
        sudo rm $vhost_name
        echo -e "\nUpdating $host.conf Virtual Host with DocumentRoot: $docroot"
        sudo cp $template $vhost_name
        sudo sed -i 's/{SERVERNAME}/'$host'/g' $vhost_name
        sudo sed -i 's/{SERVERALIAS}/'$alise_name'/g' $vhost_name
        sudo sed -i 's|{DOCUMENTROOT}|'$docroot'|g' $vhost_name
        enable_host
    fi  
}

update_svhost()
{
    if [ ! -d $certificate_path]
    then
        mkdir $certificate_path
    fi
    $siteCertPath=$certificate_path/$host
    if [ ! -d $siteCertPath]
    then
        mkdir $siteCertPath
    fi
    
    vhost_name_ssl=$site_available$host"-ssl.conf"
    if [ ! -f $vhost_name_ssl ]
    then
        echo -e "\nHost name $host-ssl.conf does not exist!"
    else
        echo -e "\nDefault ServerAlias : " $host
        printf "Would you like to change ServerAlias $host to www.$host? (y/n) : "
        read -r alise_ssl
        if [ $alise_ssl == "y" ]; then
            alise_ssl_name="www."$host;
        else
            alise_ssl_name=$host;
        fi
        sudo rm $vhost_name
        
        echo -e "\nUpdating $host-ssl.conf Virtual Host with DocumentRoot: $docroot"
        sudo cp $vhost_ssl $vhost_name_ssl
            
        sudo sed -i 's/{SERVERNAME}/'$host'/g' $vhost_name_ssl
        sudo sed -i 's/{SERVERALIAS}/'$alise_ssl_name'/g' $vhost_name_ssl
        sudo sed -i 's|{DOCUMENTROOT}|'$docroot'|g' $vhost_name_ssl
            
        printf "SSLCertificateFile    (Eg example-ssl.crt): "
        read -r crtFile
        printf "SSLCertificateKeyFile (Eg example-ssl.pem): "
        read -r pemFile
        printf "SSLCACertificateFile    (Eg ca-bundle.crl): "
        read -r caFile
            
        if [[ -f $certfilepath/$crtFile && -f $certfilepath/$pemFile && -f $certfilepath/$caFile ]]; then
            sudo sed -i 's|{CRT_FILE}|'$siteCertPath/$crtFile'|g' $vhost_name_ssl
            sudo sed -i 's|{PEM_FILE}|'$siteCertPath/$pemFile'|g' $vhost_name_ssl
            sudo sed -i 's|{CHAIN_CA_FILE}|'$siteCertPath/$caFile'|g' $vhost_name_ssl
                enable_host
        else
            sudo rm $vhost_name_ssl
                usage
        fi
    fi  
}

update_ftp()
{
    value=false
    userAcc=`cat $conf_file | grep "FTPAccount" | awk -F ": " '{print $2}'`
    if [ ! -z $userAcc ];
    then
        userOldPass=`cat $conf_file | grep "FTPPassword" | awk -F ": " '{print $2}'`
        getent passwd $userAcc >/dev/null 2>&1 && value=true
        if $value; then
            printf "Would you like to change FTP Password for $userAcc? (y/n) : " 
            read -r isFtpChange 
            if [ $isFtpChange == "y" ]; then
                echo ""
                read -s -p "Enter new UNIX password: " pass
                echo ""
                sudo passwd $userAcc
                sudo sed -i 's|'$userOldPass'|'$pass'|g' $conf_file
                echo ""
            fi
        else
            echo -e "\nFTP Username $userAcc does not exist!"      
        fi
    else
        echo -e "\nFTP Username $userAcc does not exist!"  
    fi
}

clone()
{
    if [ -d $docroot ]
    then
        rm -r $docroot/*
        printf "Repository  system ? (git/svn)  : " 
        read -r repo
        
        printf "Repository  Url ? [http://test/]  : " 
        read -r repoUrl
        
        if [ $repo == "git" ]; then
            git clone $repoUrl  $docroot/
        elif [ $repo == "svn" ]; then
            svn co $repoUrl  $docroot/
        else
            usage
        fi
        
    else
        usage
    fi
}

update_repo()
{
    if [ -d $docroot ]
    then
        if [ -d $docroot/.svn ]
        then
            svn cleanup $docroot/
            svn up $docroot/
        else
            cd $docroot/
            git fetch;
            git checkout HEAD;
        fi
    else
        usage
    fi
}

create_htaccess()
{
    if [ -d $docroot ]
    then
        if [ -f $docroot/.htaccess ]
        then
            cat $docroot/.htaccess
        else
	    cat $htaccess > $docroot/.htaccess
	    sudo sed -i 's/{HOSTNAME}/'$host'/g' $docroot/.htaccess
	    cat $docroot/.htaccess
        fi
        printf "Would you like to modify .htaccess? (y/n) : " 
        read -r htFlag
        if [ $htFlag == "y" ]; then
            sudo vi $docroot/.htaccess < `tty` > `tty`
        fi
    else
        usage
    fi
}


echo -e " "
       
if [ $# -lt 1 ]
then
    usage
else
    host=$2
    conf_file=$conf_path$host
    docroot=$home_dir$host
    
    if [ ! -d $home_dir ]
    then
        mkdir $home_dir
    fi
    
    if [ -d $conf_path ]
    then
        touch $conf_file
    else
        mkdir conf
    fi
    
    if [ $1 == "-create" ] || [ $1 == "-c" ]; then
        create_vhost
        create_dir
        copy_files
       # create_ftp
        restart_apache
        printf "Would you like to clone files from repo ? (y/n) : " 
        read -r isrepo 
        if [ $isrepo == "y" ]; then
            clone
        fi
    elif [ $1 == "-sslhost" ] || [ $1 == "-s" ]; then
        create_svhost
        restart_apache
    elif [ $1 == "-uhost" ] || [ $1 == "-u" ]; then
        update_vhost
        restart_apache
    elif [ $1 == "-usslhost" ] || [ $1 == "-us" ]; then
        update_svhost
        restart_apache
    elif [ $1 == "-upass" ] || [ $1 == "-p" ]; then
        update_ftp
	elif [ $1 == "-remove" ] || [ $1 == "-r" ]; then
        remove_all
        restart_apache
    elif [ $1 == "-disable" ] || [ $1 == "-d" ]; then
        disable_host
        restart_apache
    elif [ $1 == "-cftp" ] || [ $1 == "-f" ]; then
        create_ftp
    elif [ $1 == "-enable" ] || [ $1 == "-e" ]; then
        enable_host
        restart_apache
    elif [ $1 == "-clone" ] || [ $1 == "-cl" ]; then
        clone
    elif [ $1 == "-repoUpdate" ] || [ $1 == "-up" ]; then
        update_repo
    elif [ $1 == "-htaccess" ] || [ $1 == "-ht" ]; then
        create_htaccess
    else
        usage
    fi
fi
